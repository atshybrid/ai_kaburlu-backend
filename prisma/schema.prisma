model OtpLog {
  id           String   @id @default(cuid())
  mobileNumber String
  otp          String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
}

model ShortNews {
  id             String          @id @default(cuid())
  title          String
  slug           String?
  summary        String?
  content        String
  language       String?
  author         User            @relation(fields: [authorId], references: [id])
  authorId       String
  categoryId     String
  category       Category?       @relation(fields: [categoryId], references: [id])
  tags           String[]
  featuredImage  String?
  publishDate    DateTime?
  publishedAt    DateTime?
  status         String          @default("PENDING")
  notifiedAt     DateTime?
  seo            Json?
  allowComments  Boolean         @default(true)
  mediaUrls      String[]
  latitude       Float?
  longitude      Float?
  address        String?
  accuracyMeters Float?
  provider       String?
  timestampUtc   DateTime?
  placeId        String?
  placeName      String?
  source         String?
  aiRemark       String?
  aiPlagiarism   Json?
  aiSensitive    Json?
  readCount      Int             @default(0)
  commentCount   Int             @default(0)
  likeCount      Int             @default(0)
  dislikeCount   Int             @default(0)
  isPinned       Boolean         @default(false)
  priority       Int             @default(0)
  isDeleted      Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  reads          ShortNewsRead[]
  comments       Comment[]

  @@index([status, publishedAt])
  @@index([authorId])
  @@index([categoryId, status])
  @@index([language])
  @@index([isPinned, priority, publishedAt])
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

/// Organization settings for receipts (80G etc.)
model OrgSetting {
  id                        String   @id @default(cuid())
  orgName                   String
  addressLine1              String?
  addressLine2              String?
  city                      String?
  state                     String?
  pincode                   String?
  country                   String?  @default("India")
  pan                       String?
  eightyGNumber             String?  // e.g., AAATK1234L/80G/05/2024-25
  eightyGValidFrom          DateTime?
  eightyGValidTo            DateTime?
  email                     String?
  phone                     String?
  website                   String?
  authorizedSignatoryName   String?
  authorizedSignatoryTitle  String?
  // New branding and docs
  hrciLogoUrl               String?  // HRCI logo image (URL)
  stampRoundUrl             String?  // Round stamp PNG URL
  documents                 Json?    // Arbitrary documents metadata: { title, url, type }[]
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  @@index([orgName])
}

model User {
  id                   String                @id @default(cuid())
  mobileNumber         String?               @unique
  mpin                 String?
  mpinHash             String?               @db.VarChar(255)
  firebaseUid          String?
  email                String?               @unique
  role                 Role                  @relation(fields: [roleId], references: [id])
  roleId               String
  language             Language              @relation(fields: [languageId], references: [id])
  languageId           String
  status               String                @default("PENDING") // PENDING, ACTIVE, INACTIVE, SUSPENDED
  upgradedAt           DateTime? // Set when guest is upgraded
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  devices              Device[]
  articles             Article[]
  likes                Like[]
  comments             Comment[]
  location             UserLocation?
  profile              UserProfile?
  articleViews         ArticleView[]
  shortNews            ShortNews[]
  shortNewsReads       ShortNewsRead[]
  dislikes             Dislike[]
  articleReads         ArticleRead[]
  media                Media[]
  contentReads         ContentRead[]
  contentReactions     ContentReaction[]
  pushNotificationLogs PushNotificationLog[]
}

/// Stores editable AI prompts by key. Allows changing prompts without code changes.
model Prompt {
  id          String   @id @default(cuid())
  key         String   @unique // e.g., SEO_GENERATION, MODERATION, CATEGORY_TRANSLATION
  content     String // the prompt template content; supports {{placeholders}}
  description String? // optional human-friendly description
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
}

/// Organizational cells / wings (e.g., General Body, Women Wing, Youth Wing)
model Cell {
  id                String              @id @default(cuid())
  name              String              @unique
  code              String?             @unique
  description       String?
  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  memberships       Membership[]
  levelCapacities   CellLevelCapacity[]
  designationPrices DesignationPrice[]
}

/// Organizational levels for membership slots
enum OrgLevel {
  NATIONAL
  ZONE
  STATE
  DISTRICT
  MANDAL
}

/// Status of a membership (seat claim lifecycle)
enum MembershipStatus {
  PENDING_PAYMENT // reserved but awaiting payment (amount > 0)
  PENDING_APPROVAL // payment amount = 0; requires admin approval
  ACTIVE // active, card issued
  EXPIRED // id card validity ended
  REVOKED // manually revoked by admin
}

/// Payment status for membership fees
enum MembershipPaymentStatus {
  NOT_REQUIRED
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

/// ID Card issuance status
enum IdCardStatus {
  NOT_CREATED
  GENERATED
  REVOKED
  EXPIRED
}

/// Designation template (hierarchical) reused across all cells/levels
model Designation {
  id              String             @id @default(cuid())
  name            String
  code            String             @unique
  parentId        String?            @db.VarChar(191)
  parent          Designation?       @relation("DesignationHierarchy", fields: [parentId], references: [id])
  children        Designation[]      @relation("DesignationHierarchy")
  defaultCapacity Int                @default(0)
  idCardFee       Int                @default(0) // amount in smallest currency unit (e.g., INR rupees)
  validityDays    Int                @default(365)
  orderRank       Int                @default(0)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  memberships     Membership[]
  prices          DesignationPrice[]

  @@unique([name, parentId])
}

/// Price overrides for a designation by level/cell/geography (most specific match wins)
model DesignationPrice {
  id            String      @id @default(cuid())
  designation   Designation @relation(fields: [designationId], references: [id])
  designationId String
  cell          Cell?       @relation(fields: [cellId], references: [id])
  cellId        String?
  level         OrgLevel?
  zone          HrcZone?
  hrcCountryId  String?
  hrcStateId    String?
  hrcDistrictId String?
  hrcMandalId   String?
  fee           Int         @default(0)
  validityDays  Int?
  currency      String      @default("INR")
  activeFrom    DateTime?
  activeTo      DateTime?
  priority      Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([designationId, cellId, level, zone, hrcStateId, hrcDistrictId, hrcMandalId])
}

/// Membership claiming a designation at a specific org level + geography + cell
model Membership {
  id            String                  @id @default(cuid())
  userId        String // future relation to User (kept as scalar now to avoid circular edits)
  cell          Cell                    @relation(fields: [cellId], references: [id])
  cellId        String
  designation   Designation             @relation(fields: [designationId], references: [id])
  designationId String
  level         OrgLevel
  zone          HrcZone? // used only when level = ZONE
  // Geographic scoping fields (only one or chain relevant depending on level)
  hrcCountryId  String? // for NATIONAL / fallback
  hrcStateId    String? // for STATE
  hrcDistrictId String? // for DISTRICT
  hrcMandalId   String? // for MANDAL
  status        MembershipStatus        @default(PENDING_PAYMENT)
  paymentStatus MembershipPaymentStatus @default(NOT_REQUIRED)
  idCardStatus  IdCardStatus            @default(NOT_CREATED)
  seatSequence  Int                     @default(1) // 1..capacity if we enumerate seats
  lockedAt      DateTime? // when seat reserved pre-payment
  activatedAt   DateTime?
  expiresAt     DateTime?
  revokedAt     DateTime?
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  payments      MembershipPayment[]
  idCard        IDCard?
  kyc           MembershipKyc?

  @@unique([cellId, designationId, level, zone, hrcCountryId, hrcStateId, hrcDistrictId, hrcMandalId, seatSequence])
  @@index([cellId, designationId, level])
}

/// Payment records linked to a membership
model MembershipPayment {
  id           String                  @id @default(cuid())
  membership   Membership              @relation(fields: [membershipId], references: [id])
  membershipId String
  amount       Int                     @default(0)
  status       MembershipPaymentStatus @default(PENDING)
  providerRef  String? // gateway transaction id
  meta         Json?
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
}

/// Payment Intent to support pay-first flow (no membership row until payment success)
enum PaymentIntentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUND_REQUIRED
  EXPIRED
}

enum PaymentIntentType {
  MEMBERSHIP
  DONATION
}

model PaymentIntent {
  id              String              @id @default(cuid())
  // Seat specification at the time of order creation
  cellCodeOrName  String?
  designationCode String?
  level           OrgLevel?
  zone            HrcZone?
  hrcCountryId    String?
  hrcStateId      String?
  hrcDistrictId   String?
  hrcMandalId     String?
  // Payment details
  amount          Int                 @default(0)
  currency        String              @default("INR")
  status          PaymentIntentStatus @default(PENDING)
  intentType      PaymentIntentType   @default(MEMBERSHIP)
  providerRef     String?
  meta            Json?
  // Result linkage (after success)
  membershipId    String?
  // Optional expiry for the intent
  expiresAt       DateTime?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}

/// Donation campaigns/events
model DonationEvent {
  id               String   @id @default(cuid())
  title            String
  description      String?
  coverImageUrl    String?
  goalAmount       Int?
  currency         String   @default("INR")
  startAt          DateTime?
  endAt            DateTime?
  status           String   @default("DRAFT") // DRAFT | ACTIVE | PAUSED | ENDED
  presets          Int[]
  allowCustom      Boolean  @default(true)
  collectedAmount  Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  donations        Donation[]
  shareLinks       DonationShareLink[]
  images           DonationEventImage[]

  @@index([status, startAt, endAt])
}

/// Individual donation records
model Donation {
  id               String         @id @default(cuid())
  event            DonationEvent  @relation(fields: [eventId], references: [id])
  eventId          String
  amount           Int
  currency         String         @default("INR")
  donorName        String?
  donorMobile      String?
  donorEmail       String?
  donorPan         String?
  isAnonymous      Boolean        @default(false)
  referrerUserId   String?
  status           String         @default("PENDING") // PENDING | SUCCESS | FAILED | REFUND
  providerOrderId  String?
  providerPaymentId String?
  paymentIntentId  String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@index([eventId, status])
}

/// Member-share links for donation attribution
model DonationShareLink {
  id               String        @id @default(cuid())
  event            DonationEvent @relation(fields: [eventId], references: [id])
  eventId          String
  createdByUserId  String
  code             String        @unique
  active           Boolean       @default(true)
  clicksCount      Int           @default(0)
  ordersCount      Int           @default(0)
  successCount     Int           @default(0)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

/// Gallery images per donation event (for mobile sliders)
model DonationEventImage {
  id        String         @id @default(cuid())
  event     DonationEvent  @relation(fields: [eventId], references: [id])
  eventId   String
  url       String
  caption   String?
  order     Int            @default(0)
  isActive  Boolean        @default(true)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@index([eventId, isActive, order])
}

/// Aggregate capacity per Cell + OrgLevel (independent of designation) to enforce
/// a hard upper bound like: each cell can have at most 72 NATIONAL posts total (sum of all designations).
model CellLevelCapacity {
  id            String   @id @default(cuid())
  cell          Cell     @relation(fields: [cellId], references: [id])
  cellId        String
  level         OrgLevel
  // Optional zone when level = ZONE
  zone          HrcZone?
  // Optional geo scoping when level is DISTRICT / MANDAL (mirrors Membership)
  hrcStateId    String?
  hrcDistrictId String?
  hrcMandalId   String?
  capacity      Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([cellId, level, zone, hrcStateId, hrcDistrictId, hrcMandalId])
}

/// Generated ID Card details (simple JSON metadata can expand later)
model IDCard {
  id              String       @id @default(cuid())
  membership      Membership   @relation(fields: [membershipId], references: [id])
  membershipId    String       @unique
  cardNumber      String       @unique
  issuedAt        DateTime     @default(now())
  expiresAt       DateTime
  meta            Json?
  status          IdCardStatus @default(GENERATED)
  // Snapshot fields for convenience (immutable at issuance time)
  fullName        String?
  designationName String?
  cellName        String?
  mobileNumber    String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

/// KYC details linked to a membership. Stores document URLs uploaded via Media API.
model MembershipKyc {
  id                    String     @id @default(cuid())
  membership            Membership @relation(fields: [membershipId], references: [id])
  membershipId          String     @unique
  // Aadhaar details
  aadhaarNumber         String?
  aadhaarFrontUrl       String?
  aadhaarBackUrl        String?
  // PAN details
  panNumber             String?
  panCardUrl            String?
  // LLB details (required for some designations like Legal Secretary)
  llbRegistrationNumber String?
  llbSupportDocUrl      String?
  // Meta/status
  status                String? // e.g., PENDING, UNDER_REVIEW, APPROVED, REJECTED
  remarks               String?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
}

/// Global (or scoped in future) HRCI ID Card visual/settings configuration
model IdCardSetting {
  id                String   @id @default(cuid())
  name              String   @default("default")
  isActive          Boolean  @default(false)
  primaryColor      String?
  secondaryColor    String?
  frontH1           String?
  frontH2           String?
  frontH3           String?
  frontH4           String?
  frontLogoUrl      String?
  secondLogoUrl     String?
  hrciStampUrl      String?
  authorSignUrl     String?
  registerDetails   String? // plain text or small markdown
  frontFooterText   String?
  headOfficeAddress String?
  terms             Json? // array of strings
  qrLandingBaseUrl  String? // base to compose verify URL, else derived from request
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([isActive])
}

/// HRCI Case Management
enum CaseStatus {
  NEW
  TRIAGED
  IN_PROGRESS
  LEGAL_REVIEW
  ACTION_TAKEN
  RESOLVED
  REJECTED
  CLOSED
  ESCALATED
}

enum CasePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum CaseVisibility {
  PRIVATE
  PUBLIC_LINK
}

enum LegalStatus {
  NOT_REQUIRED
  ADVISED
  FILED
  IN_COURT
}

model HrcCase {
  id                String         @id @default(cuid())
  caseNumber        String         @unique
  title             String
  description       String
  incidentAt        DateTime?
  // Complainant (member/victim) and creator
  complainantUserId String?
  createdByUserId   String
  // HRCI geography scoping to route by jurisdiction
  hrcCountryId      String?
  hrcStateId        String?
  hrcDistrictId     String?
  hrcMandalId       String?
  // Optional precise location
  latitude          Float?
  longitude         Float?
  address           String?
  // Classification and workflow
  category          String?
  priority          CasePriority   @default(MEDIUM)
  status            CaseStatus     @default(NEW)
  visibility        CaseVisibility @default(PRIVATE)
  // Assignment and legal
  assignedToUserId  String?
  assignedRoleHint  String?
  legalSuggestion   String?
  legalStatus       LegalStatus    @default(NOT_REQUIRED)
  // AI assist (optional)
  aiCategoryGuess   String?
  aiSeverityScore   Float?
  aiSummary         String?
  // Meta
  source            String? // MOBILE | WEB | ADMIN
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  comments     HrcCaseComment[]
  attachments  HrcCaseAttachment[]
  events       HrcCaseEvent[]
  categoryMaps HrcCaseCategoryMap[]

  @@index([status, priority, createdAt])
  @@index([hrcStateId, hrcDistrictId, hrcMandalId, status])
}

model HrcCaseComment {
  id           String   @id @default(cuid())
  case         HrcCase  @relation(fields: [caseId], references: [id])
  caseId       String
  authorUserId String
  body         String
  visibility   String   @default("EXTERNAL") // EXTERNAL | INTERNAL
  createdAt    DateTime @default(now())
}

model HrcCaseAttachment {
  id        String   @id @default(cuid())
  case      HrcCase  @relation(fields: [caseId], references: [id])
  caseId    String
  media     Media    @relation("HrcCaseAttachment_media", fields: [mediaId], references: [id])
  mediaId   String
  fileName  String?
  mime      String?
  size      Int?
  createdAt DateTime @default(now())
}

model HrcCaseEvent {
  id          String   @id @default(cuid())
  case        HrcCase  @relation(fields: [caseId], references: [id])
  caseId      String
  type        String // CREATED | STATUS_CHANGE | ASSIGNED | COMMENT_INTERNAL | COMMENT_EXTERNAL | ATTACHMENT_ADDED | ESCALATED | LEGAL_SUGGESTION
  data        Json?
  actorUserId String?
  createdAt   DateTime @default(now())
}

/// HRCI Case Categories (hierarchical)
model HrcCaseCategory {
  id        String               @id @default(cuid())
  code      String               @unique
  name      String
  parentId  String?
  parent    HrcCaseCategory?     @relation("HrcCaseCategoryHierarchy", fields: [parentId], references: [id])
  children  HrcCaseCategory[]    @relation("HrcCaseCategoryHierarchy")
  order     Int                  @default(0)
  isActive  Boolean              @default(true)
  icon      String?
  color     String?
  meta      Json?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  caseMaps  HrcCaseCategoryMap[]

  @@index([parentId])
  @@index([isActive, order])
}

/// Many-to-many mapping between cases and categories (supports multi-category per case)
model HrcCaseCategoryMap {
  caseId     String
  categoryId String
  isPrimary  Boolean  @default(false)
  createdAt  DateTime @default(now())

  case     HrcCase         @relation(fields: [caseId], references: [id])
  category HrcCaseCategory @relation(fields: [categoryId], references: [id])

  @@id([caseId, categoryId])
  @@index([categoryId])
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions Json
  users       User[]
  devices     Device[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Language {
  id         String    @id @default(cuid())
  name       String    @unique
  code       String    @unique
  nativeName String
  direction  String    @default("ltr")
  isDeleted  Boolean   @default(false)
  users      User[]
  articles   Article[]
  devices    Device[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Device {
  id             String    @id @default(cuid())
  user           User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId         String?
  deviceId       String    @unique
  deviceModel    String
  pushToken      String?
  latitude       Float?
  longitude      Float?
  accuracyMeters Float?
  placeId        String?
  placeName      String?
  address        String?
  source         String?
  // When a device operates as a guest (no User row) we store role & language here.
  role           Role?     @relation(fields: [roleId], references: [id])
  roleId         String?
  language       Language? @relation(fields: [languageId], references: [id])
  languageId     String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model UserLocation {
  id             String    @id @default(cuid())
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String    @unique
  latitude       Float
  longitude      Float
  accuracyMeters Float?
  provider       String?
  timestampUtc   DateTime?
  placeId        String?
  placeName      String?
  address        String?
  source         String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Country {
  id        String   @id @default(cuid())
  name      String   @unique
  code      String?  @unique
  states    State[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// Zones for HRCI geography segmentation
enum HrcZone {
  NORTH
  SOUTH
  EAST
  WEST
  CENTRAL
}

/// Dedicated HRCI country table (decoupled from generic Country for future divergence)
model HrcCountry {
  id        String     @id @default(cuid())
  name      String     @unique
  code      String?    @unique
  states    HrcState[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model HrcState {
  id        String        @id @default(cuid())
  name      String        @unique
  code      String?       @unique
  zone      HrcZone
  country   HrcCountry    @relation(fields: [countryId], references: [id])
  countryId String
  districts HrcDistrict[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model HrcDistrict {
  id        String      @id @default(cuid())
  name      String
  state     HrcState    @relation(fields: [stateId], references: [id])
  stateId   String
  mandals   HrcMandal[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([stateId, name])
}

model HrcMandal {
  id         String      @id @default(cuid())
  name       String
  district   HrcDistrict @relation(fields: [districtId], references: [id])
  districtId String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@unique([districtId, name])
}

model State {
  id           String        @id @default(cuid())
  name         String        @unique
  country      Country       @relation(fields: [countryId], references: [id])
  countryId    String
  isDeleted    Boolean       @default(false)
  districts    District[]
  userProfiles UserProfile[] @relation("UserProfile_state")
  contentReads ContentRead[] @relation("ContentRead_state")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model District {
  id           String        @id @default(cuid())
  name         String
  state        State         @relation(fields: [stateId], references: [id])
  stateId      String
  isDeleted    Boolean       @default(false)
  mandals      Mandal[]
  userProfiles UserProfile[] @relation("UserProfile_district")
  contentReads ContentRead[] @relation("ContentRead_district")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Mandal {
  id           String        @id @default(cuid())
  name         String
  district     District      @relation(fields: [districtId], references: [id])
  districtId   String
  isDeleted    Boolean       @default(false)
  userProfiles UserProfile[] @relation("UserProfile_mandal")
  contentReads ContentRead[] @relation("ContentRead_mandal")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Category {
  id           String                @id @default(cuid())
  name         String
  slug         String                @unique
  iconUrl      String?
  isDeleted    Boolean               @default(false)
  parent       Category?             @relation("SubCategories", fields: [parentId], references: [id])
  parentId     String?
  children     Category[]            @relation("SubCategories")
  translations CategoryTranslation[]
  articles     Article[]
  shortNews    ShortNews[]
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
}

model CategoryTranslation {
  id         String   @id @default(cuid())
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  language   String
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([categoryId, language])
}

model Article {
  id                String        @id @default(cuid())
  title             String
  content           String
  shortNews         String?
  longNews          String?
  headlines         String?
  type              String // "citizen" or "reporter"
  author            User          @relation(fields: [authorId], references: [id])
  authorId          String
  // Article language (from author's language at creation time)
  language          Language?     @relation(fields: [languageId], references: [id])
  languageId        String?
  status            String        @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED
  notifiedAt        DateTime?
  categories        Category[]
  tags              String[]
  images            String[]
  scheduledAt       DateTime?
  isBreakingNews    Boolean       @default(false)
  isTrending        Boolean       @default(false)
  viewCount         Int           @default(0)
  likes             Like[]
  comments          Comment[]
  dislikes          Dislike[]
  relatedArticles   Article[]     @relation("RelatedArticles")
  relatedArticlesTo Article[]     @relation("RelatedArticles")
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  articleViews      ArticleView[]
  contentJson       Json?
  articleReads      ArticleRead[]
}

model ArticleView {
  id        String   @id @default(cuid())
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  deviceId  String?
  viewedAt  DateTime @default(now())
}

model ArticleRead {
  id               String    @id @default(cuid())
  user             User      @relation(fields: [userId], references: [id])
  userId           String
  article          Article   @relation(fields: [articleId], references: [id])
  articleId        String
  readAt           DateTime  @default(now())
  totalTimeMs      Int       @default(0)
  maxScrollPercent Float     @default(0)
  completed        Boolean   @default(false)
  lastEventAt      DateTime?
  completedAt      DateTime?
  sessionsCount    Int       @default(0)

  @@unique([userId, articleId])
}

model Like {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String
  createdAt DateTime @default(now())

  @@unique([userId, articleId])
}

model Dislike {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String
  createdAt DateTime @default(now())

  @@unique([userId, articleId])
}

model ShortNewsRead {
  id               String    @id @default(cuid())
  user             User      @relation(fields: [userId], references: [id])
  userId           String
  shortNews        ShortNews @relation(fields: [shortNewsId], references: [id])
  shortNewsId      String
  readAt           DateTime  @default(now())
  // Added metrics similar to ArticleRead for unified simple tracking
  totalTimeMs      Int       @default(0)
  maxScrollPercent Float     @default(0)
  completed        Boolean   @default(false)
  lastEventAt      DateTime?
  completedAt      DateTime?
  sessionsCount    Int       @default(0)

  @@unique([userId, shortNewsId])
}

/// Unified content read tracking (dual-write while ArticleRead / ShortNewsRead still exist).
enum ContentType {
  ARTICLE
  SHORTNEWS
}

/// Reaction value for unified content reactions
enum ReactionValue {
  LIKE
  DISLIKE
}

model ContentRead {
  id               String      @id @default(cuid())
  user             User        @relation(fields: [userId], references: [id])
  userId           String
  contentId        String // references Article.id or ShortNews.id depending on contentType
  contentType      ContentType
  readAt           DateTime    @default(now())
  totalTimeMs      Int         @default(0)
  maxScrollPercent Float       @default(0)
  completed        Boolean     @default(false)
  lastEventAt      DateTime?
  completedAt      DateTime?
  sessionsCount    Int         @default(0)
  // Snapshot location & geo context at FIRST record creation
  latitude         Float?
  longitude        Float?
  accuracyMeters   Float?
  placeId          String?
  placeName        String?
  address          String?
  stateId          String?
  districtId       String?
  mandalId         String?
  state            State?      @relation("ContentRead_state", fields: [stateId], references: [id])
  district         District?   @relation("ContentRead_district", fields: [districtId], references: [id])
  mandal           Mandal?     @relation("ContentRead_mandal", fields: [mandalId], references: [id])
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  @@unique([userId, contentType, contentId])
  @@index([contentType, contentId])
  @@index([stateId])
  @@index([districtId])
  @@index([mandalId])
}

/// Unified reactions across Article & ShortNews. Replaces legacy Like/Dislike tables going forward.
model ContentReaction {
  id          String        @id @default(cuid())
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  contentId   String // references Article.id or ShortNews.id depending on contentType (no FK for polymorphism)
  contentType ContentType
  reaction    ReactionValue
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@unique([userId, contentType, contentId])
  @@index([contentType, contentId])
  @@index([userId])
}

model Comment {
  id          String     @id @default(cuid())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  article     Article?   @relation(fields: [articleId], references: [id])
  articleId   String?
  shortNews   ShortNews? @relation(fields: [shortNewsId], references: [id])
  shortNewsId String?
  content     String
  parent      Comment?   @relation("Replies", fields: [parentId], references: [id])
  parentId    String?
  children    Comment[]  @relation("Replies")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([articleId])
  @@index([shortNewsId])
  @@index([parentId])
}

model Media {
  id              String              @id @default(cuid())
  key             String              @unique
  url             String
  name            String
  contentType     String
  size            Int
  kind            String // image | video | other
  folder          String?
  owner           User?               @relation(fields: [ownerId], references: [id])
  ownerId         String?
  profilePhotos   UserProfile[]       @relation("UserProfile_profilePhotoMedia")
  caseAttachments HrcCaseAttachment[] @relation("HrcCaseAttachment_media")
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}

/// User profile details separated from the core User
model UserProfile {
  id                     String    @id @default(cuid())
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 String    @unique
  fullName               String?
  gender                 String?
  dob                    DateTime?
  maritalStatus          String?
  bio                    String?
  profilePhotoUrl        String?
  profilePhotoMedia      Media?    @relation("UserProfile_profilePhotoMedia", fields: [profilePhotoMediaId], references: [id])
  profilePhotoMediaId    String?
  emergencyContactNumber String?
  address                Json?
  state                  State?    @relation("UserProfile_state", fields: [stateId], references: [id])
  stateId                String?
  district               District? @relation("UserProfile_district", fields: [districtId], references: [id])
  districtId             String?
  mandal                 Mandal?   @relation("UserProfile_mandal", fields: [mandalId], references: [id])
  mandalId               String?
  assemblyId             String?
  villageId              String?
  occupation             String?
  education              String?
  socialLinks            Json?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
}

/// Push notification delivery log for tracking and analytics
model PushNotificationLog {
  id String @id @default(cuid())

  // Notification details
  title    String
  body     String
  imageUrl String?
  data     Json?

  // Delivery configuration
  deliveryType String // 'TOKEN' | 'USER' | 'TOPIC' | 'BULK'
  targetTokens String[] // FCM tokens if TOKEN delivery
  targetUserId String? // User ID if USER delivery
  targetTopic  String? // Topic name if TOPIC delivery
  batchId      String? // For bulk operations

  // Delivery results
  status       String @default("PENDING") // PENDING | SENDING | SUCCESS | PARTIAL_SUCCESS | FAILED | RETRY
  totalTargets Int    @default(0)
  successCount Int    @default(0)
  failureCount Int    @default(0)

  // Error handling
  errors      Json? // Array of error details
  retryCount  Int       @default(0)
  maxRetries  Int       @default(3)
  nextRetryAt DateTime?

  // FCM response details
  fcmMessageId String? // FCM message ID for single sends
  fcmResponse  Json? // Full FCM response

  // Metadata
  priority         String  @default("NORMAL") // NORMAL | HIGH
  environment      String? // dev | staging | production
  sourceController String? // Which controller/service sent this
  sourceAction     String? // What action triggered this

  // Timestamps
  scheduledAt DateTime?
  sentAt      DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user User? @relation(fields: [targetUserId], references: [id])

  @@index([status])
  @@index([deliveryType])
  @@index([targetUserId])
  @@index([targetTopic])
  @@index([batchId])
  @@index([createdAt])
  @@index([nextRetryAt])
}

/// Terms and Conditions management
model TermsAndConditions {
  id          String    @id @default(cuid())
  title       String
  content     String    @db.Text // HTML content
  version     String    @default("1.0")
  isActive    Boolean   @default(false)
  language    String    @default("en") // Language code (en, te, hi, etc.)
  effectiveAt DateTime?
  createdBy   String? // Admin user ID
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([isActive])
  @@index([language])
  @@index([version])
}

/// Privacy Policy management  
model PrivacyPolicy {
  id          String    @id @default(cuid())
  title       String
  content     String    @db.Text // HTML content
  version     String    @default("1.0")
  isActive    Boolean   @default(false)
  language    String    @default("en") // Language code (en, te, hi, etc.)
  effectiveAt DateTime?
  createdBy   String? // Admin user ID
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([isActive])
  @@index([language])
  @@index([version])
}

/// Discount for membership fee (applied in pay-first flow)
model Discount {
  id                String    @id @default(cuid())
  code              String?   @unique
  mobileNumber      String
  // Seat filters (optional): if provided, must match request to apply
  cell              String?
  designationCode   String?
  level             OrgLevel?
  zone              HrcZone?
  hrcCountryId      String?
  hrcStateId        String?
  hrcDistrictId     String?
  hrcMandalId       String?
  // Discount values: provide either amountOff or percentOff
  amountOff         Int?
  percentOff        Int?
  currency          String    @default("INR")
  maxRedemptions    Int       @default(1)
  redeemedCount     Int       @default(0)
  activeFrom        DateTime?
  activeTo          DateTime?
  status            String    @default("ACTIVE") // ACTIVE | RESERVED | REDEEMED | CANCELLED | EXPIRED
  appliedToIntentId String?
  createdByUserId   String?
  reason            String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([mobileNumber, status])
  @@index([designationCode, level])
  @@index([hrcStateId, hrcDistrictId, hrcMandalId])
}
