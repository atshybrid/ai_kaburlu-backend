model OtpLog {
  id           String   @id @default(cuid())
  mobileNumber String
  otp          String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
}

model ShortNews {
  id             String    @id @default(cuid())
  title          String
  slug           String?
  summary        String?
  content        String
  language       String?
  author         User      @relation(fields: [authorId], references: [id])
  authorId       String
  categoryId     String
  category       Category? @relation(fields: [categoryId], references: [id])
  tags           String[]
  featuredImage  String?
  publishDate    DateTime?
  publishedAt    DateTime?
  status         String    @default("PENDING")
  notifiedAt     DateTime?
  seo            Json?
  allowComments  Boolean   @default(true)
  mediaUrls      String[]
  latitude       Float?
  longitude      Float?
  address        String?
  accuracyMeters Float?
  provider       String?
  timestampUtc   DateTime?
  placeId        String?
  placeName      String?
  source         String?
  aiRemark       String?
  aiPlagiarism   Json?
  aiSensitive    Json?
  readCount      Int       @default(0)
  commentCount   Int       @default(0)
  likeCount      Int       @default(0)
  dislikeCount   Int       @default(0)
  isPinned       Boolean   @default(false)
  priority       Int       @default(0)
  isDeleted      Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  reads          ShortNewsRead[]
  comments       Comment[]

  @@index([status, publishedAt])
  @@index([authorId])
  @@index([categoryId, status])
  @@index([language])
  @@index([isPinned, priority, publishedAt])
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

model User {
  id                   String                @id @default(cuid())
  mobileNumber         String?               @unique
  mpin                 String?
  firebaseUid          String?
  email                String?               @unique
  role                 Role                  @relation(fields: [roleId], references: [id])
  roleId               String
  language             Language              @relation(fields: [languageId], references: [id])
  languageId           String
  status               String                @default("PENDING") // PENDING, ACTIVE, INACTIVE, SUSPENDED
  upgradedAt           DateTime? // Set when guest is upgraded
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  devices              Device[]
  articles             Article[]
  likes                Like[]
  comments             Comment[]
  location             UserLocation?
  profile              UserProfile?
  articleViews         ArticleView[]
  shortNews            ShortNews[]
  shortNewsReads       ShortNewsRead[]
  dislikes             Dislike[]
  articleReads         ArticleRead[]
  media                Media[]
  contentReads         ContentRead[]
  contentReactions     ContentReaction[]
  pushNotificationLogs PushNotificationLog[]
  hrcVolunteerProfile  HrcVolunteerProfile?
}

/// Stores editable AI prompts by key. Allows changing prompts without code changes.
model Prompt {
  id          String   @id @default(cuid())
  key         String   @unique // e.g., SEO_GENERATION, MODERATION, CATEGORY_TRANSLATION
  content     String // the prompt template content; supports {{placeholders}}
  description String? // optional human-friendly description
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions Json
  users       User[]
  devices     Device[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Language {
  id         String    @id @default(cuid())
  name       String    @unique
  code       String    @unique
  nativeName String
  direction  String    @default("ltr")
  isDeleted  Boolean   @default(false)
  users      User[]
  articles   Article[]
  devices    Device[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Device {
  id             String    @id @default(cuid())
  user           User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId         String?
  deviceId       String    @unique
  deviceModel    String
  pushToken      String?
  latitude       Float?
  longitude      Float?
  accuracyMeters Float?
  placeId        String?
  placeName      String?
  address        String?
  source         String?
  // When a device operates as a guest (no User row) we store role & language here.
  role           Role?     @relation(fields: [roleId], references: [id])
  roleId         String?
  language       Language? @relation(fields: [languageId], references: [id])
  languageId     String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model UserLocation {
  id             String    @id @default(cuid())
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String    @unique
  latitude       Float
  longitude      Float
  accuracyMeters Float?
  provider       String?
  timestampUtc   DateTime?
  placeId        String?
  placeName      String?
  address        String?
  source         String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Country {
  id        String   @id @default(cuid())
  name      String   @unique
  code      String?  @unique
  states    State[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model State {
  id           String        @id @default(cuid())
  name         String        @unique
  country      Country       @relation(fields: [countryId], references: [id])
  countryId    String
  isDeleted    Boolean       @default(false)
  districts    District[]
  userProfiles UserProfile[] @relation("UserProfile_state")
  contentReads ContentRead[] @relation("ContentRead_state")
  hrcTeams     HrcTeam[]
  hrcCases     HrcCase[]     @relation("CaseState")
  feeConfigs   PaymentFeeConfig[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model District {
  id           String        @id @default(cuid())
  name         String
  state        State         @relation(fields: [stateId], references: [id])
  stateId      String
  isDeleted    Boolean       @default(false)
  mandals      Mandal[]
  userProfiles UserProfile[] @relation("UserProfile_district")
  contentReads ContentRead[] @relation("ContentRead_district")
  hrcTeams     HrcTeam[]
  hrcCases     HrcCase[]     @relation("CaseDistrict")
  feeConfigs   PaymentFeeConfig[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Mandal {
  id           String        @id @default(cuid())
  name         String
  district     District      @relation(fields: [districtId], references: [id])
  districtId   String
  isDeleted    Boolean       @default(false)
  userProfiles UserProfile[] @relation("UserProfile_mandal")
  contentReads ContentRead[] @relation("ContentRead_mandal")
  hrcTeams     HrcTeam[]
  hrcCases     HrcCase[]     @relation("CaseMandal")
  feeConfigs   PaymentFeeConfig[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Category {
  id           String                @id @default(cuid())
  name         String
  slug         String                @unique
  iconUrl      String?
  isDeleted    Boolean               @default(false)
  parent       Category?             @relation("SubCategories", fields: [parentId], references: [id])
  parentId     String?
  children     Category[]            @relation("SubCategories")
  translations CategoryTranslation[]
  articles     Article[]
  shortNews    ShortNews[]
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
}

model CategoryTranslation {
  id         String   @id @default(cuid())
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  language   String
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([categoryId, language])
}

model Article {
  id                String        @id @default(cuid())
  title             String
  content           String
  shortNews         String?
  longNews          String?
  headlines         String?
  type              String // "citizen" or "reporter"
  author            User          @relation(fields: [authorId], references: [id])
  authorId          String
  // Article language (from author's language at creation time)
  language          Language?     @relation(fields: [languageId], references: [id])
  languageId        String?
  status            String        @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED
  notifiedAt        DateTime?
  categories        Category[]
  tags              String[]
  images            String[]
  scheduledAt       DateTime?
  isBreakingNews    Boolean       @default(false)
  isTrending        Boolean       @default(false)
  viewCount         Int           @default(0)
  likes             Like[]
  comments          Comment[]
  dislikes          Dislike[]
  relatedArticles   Article[]     @relation("RelatedArticles")
  relatedArticlesTo Article[]     @relation("RelatedArticles")
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  articleViews      ArticleView[]
  contentJson       Json?
  articleReads      ArticleRead[]
}

model ArticleView {
  id        String   @id @default(cuid())
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  deviceId  String?
  viewedAt  DateTime @default(now())
}

model ArticleRead {
  id               String    @id @default(cuid())
  user             User      @relation(fields: [userId], references: [id])
  userId           String
  article          Article   @relation(fields: [articleId], references: [id])
  articleId        String
  readAt           DateTime  @default(now())
  totalTimeMs      Int       @default(0)
  maxScrollPercent Float     @default(0)
  completed        Boolean   @default(false)
  lastEventAt      DateTime?
  completedAt      DateTime?
  sessionsCount    Int       @default(0)

  @@unique([userId, articleId])
}

model Like {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String
  createdAt DateTime @default(now())

  @@unique([userId, articleId])
}

model Dislike {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String
  createdAt DateTime @default(now())

  @@unique([userId, articleId])
}

model ShortNewsRead {
  id               String    @id @default(cuid())
  user             User      @relation(fields: [userId], references: [id])
  userId           String
  shortNews        ShortNews @relation(fields: [shortNewsId], references: [id])
  shortNewsId      String
  readAt           DateTime  @default(now())
  // Added metrics similar to ArticleRead for unified simple tracking
  totalTimeMs      Int       @default(0)
  maxScrollPercent Float     @default(0)
  completed        Boolean   @default(false)
  lastEventAt      DateTime?
  completedAt      DateTime?
  sessionsCount    Int       @default(0)

  @@unique([userId, shortNewsId])
}

/// Unified content read tracking (dual-write while ArticleRead / ShortNewsRead still exist).
enum ContentType {
  ARTICLE
  SHORTNEWS
}

/// Reaction value for unified content reactions
enum ReactionValue {
  LIKE
  DISLIKE
}

model ContentRead {
  id               String      @id @default(cuid())
  user             User        @relation(fields: [userId], references: [id])
  userId           String
  contentId        String // references Article.id or ShortNews.id depending on contentType
  contentType      ContentType
  readAt           DateTime    @default(now())
  totalTimeMs      Int         @default(0)
  maxScrollPercent Float       @default(0)
  completed        Boolean     @default(false)
  lastEventAt      DateTime?
  completedAt      DateTime?
  sessionsCount    Int         @default(0)
  // Snapshot location & geo context at FIRST record creation
  latitude         Float?
  longitude        Float?
  accuracyMeters   Float?
  placeId          String?
  placeName        String?
  address          String?
  stateId          String?
  districtId       String?
  mandalId         String?
  state            State?      @relation("ContentRead_state", fields: [stateId], references: [id])
  district         District?   @relation("ContentRead_district", fields: [districtId], references: [id])
  mandal           Mandal?     @relation("ContentRead_mandal", fields: [mandalId], references: [id])
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  @@unique([userId, contentType, contentId])
  @@index([contentType, contentId])
  @@index([stateId])
  @@index([districtId])
  @@index([mandalId])
}

/// Unified reactions across Article & ShortNews. Replaces legacy Like/Dislike tables going forward.
model ContentReaction {
  id          String        @id @default(cuid())
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  contentId   String // references Article.id or ShortNews.id depending on contentType (no FK for polymorphism)
  contentType ContentType
  reaction    ReactionValue
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@unique([userId, contentType, contentId])
  @@index([contentType, contentId])
  @@index([userId])
}

model Comment {
  id          String     @id @default(cuid())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  article     Article?   @relation(fields: [articleId], references: [id])
  articleId   String?
  shortNews   ShortNews? @relation(fields: [shortNewsId], references: [id])
  shortNewsId String?
  content     String
  parent      Comment?   @relation("Replies", fields: [parentId], references: [id])
  parentId    String?
  replies     Comment[]  @relation("Replies")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([articleId])
  @@index([shortNewsId])
  @@index([parentId])
}

model Media {
  id            String        @id @default(cuid())
  key           String        @unique
  url           String
  name          String
  contentType   String
  size          Int
  kind          String // image | video | other
  folder        String?
  owner         User?         @relation(fields: [ownerId], references: [id])
  ownerId       String?
  profilePhotos UserProfile[] @relation("UserProfile_profilePhotoMedia")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

/// User profile details separated from the core User
model UserProfile {
  id                     String    @id @default(cuid())
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 String    @unique
  fullName               String?
  gender                 String?
  dob                    DateTime?
  maritalStatus          String?
  bio                    String?
  profilePhotoUrl        String?
  profilePhotoMedia      Media?    @relation("UserProfile_profilePhotoMedia", fields: [profilePhotoMediaId], references: [id])
  profilePhotoMediaId    String?
  emergencyContactNumber String?
  address                Json?
  state                  State?    @relation("UserProfile_state", fields: [stateId], references: [id])
  stateId                String?
  district               District? @relation("UserProfile_district", fields: [districtId], references: [id])
  districtId             String?
  mandal                 Mandal?   @relation("UserProfile_mandal", fields: [mandalId], references: [id])
  mandalId               String?
  assemblyId             String?
  villageId              String?
  occupation             String?
  education              String?
  socialLinks            Json?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
}

/// Push notification delivery log for tracking and analytics
model PushNotificationLog {
  id String @id @default(cuid())

  // Notification details
  title    String
  body     String
  imageUrl String?
  data     Json?

  // Delivery configuration
  deliveryType String // 'TOKEN' | 'USER' | 'TOPIC' | 'BULK'
  targetTokens String[] // FCM tokens if TOKEN delivery
  targetUserId String? // User ID if USER delivery
  targetTopic  String? // Topic name if TOPIC delivery
  batchId      String? // For bulk operations

  // Delivery results
  status       String @default("PENDING") // PENDING | SENDING | SUCCESS | PARTIAL_SUCCESS | FAILED | RETRY
  totalTargets Int    @default(0)
  successCount Int    @default(0)
  failureCount Int    @default(0)

  // Error handling
  errors      Json? // Array of error details
  retryCount  Int       @default(0)
  maxRetries  Int       @default(3)
  nextRetryAt DateTime?

  // FCM response details
  fcmMessageId String? // FCM message ID for single sends
  fcmResponse  Json? // Full FCM response

  // Metadata
  priority         String  @default("NORMAL") // NORMAL | HIGH
  environment      String? // dev | staging | production
  sourceController String? // Which controller/service sent this
  sourceAction     String? // What action triggered this

  // Timestamps
  scheduledAt DateTime?
  sentAt      DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user User? @relation(fields: [targetUserId], references: [id])

  @@index([status])
  @@index([deliveryType])
  @@index([targetUserId])
  @@index([targetTopic])
  @@index([batchId])
  @@index([createdAt])
  @@index([nextRetryAt])
}

/// Terms and Conditions management
model TermsAndConditions {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text // HTML content
  version     String   @default("1.0")
  isActive    Boolean  @default(false)
  language    String   @default("en") // Language code (en, te, hi, etc.)
  effectiveAt DateTime?
  createdBy   String?  // Admin user ID
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive])
  @@index([language])
  @@index([version])
}

/// Privacy Policy management  
model PrivacyPolicy {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text // HTML content
  version     String   @default("1.0")
  isActive    Boolean  @default(false)
  language    String   @default("en") // Language code (en, te, hi, etc.)
  effectiveAt DateTime?
  createdBy   String?  // Admin user ID
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive])
  @@index([language])
  @@index([version])
}

/// ------------------------------
/// HRCI (Human Rights) Module
/// ------------------------------

enum CaseStatus {
  NEW
  UNDER_REVIEW
  IN_PROGRESS
  ESCALATED
  RESOLVED
  CLOSED
  REJECTED
}

enum CasePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum PaymentPurpose {
  ID_CARD_ISSUE
  ID_CARD_RENEW
  DONATION
  OTHER
}

enum PaymentStatus {
  CREATED
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIAL_REFUND
}

enum TeamScopeLevel {
  GLOBAL
  COUNTRY
  STATE
  DISTRICT
  MANDAL
}

enum IdCardStatus {
  PENDING_PAYMENT
  ACTIVE
  EXPIRED
  REVOKED
}

/// Role of a volunteer within a specific HRC team (scoped role, not global platform role)
enum HrcTeamMemberRole {
  MEMBER
  COORDINATOR
  ADMIN
}

/// Thematic specialization for a human rights cell / team
enum HrcCellType {
  COMPLAINT_LEGAL_SUPPORT
  WOMEN_CHILD_RIGHTS
  SOCIAL_JUSTICE
  AWARENESS_EDUCATION
}

/// Plan catalog for issuing/renewing HRCI ID cards with hierarchical applicability constraints
model HrcIdCardPlan {
  id            String          @id @default(cuid())
  planName      String
  amountMinor   Int
  currency      String          @default("INR")
  renewalDays   Int              // validity period in days
  hierarchyLevel TeamScopeLevel? // if null -> global plan
  stateId       String?
  districtId    String?
  mandalId      String?
  active        Boolean         @default(true)
  createdBy     String?
  updatedBy     String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  idCards       HrcIdCard[]

  @@index([hierarchyLevel])
  @@index([stateId])
  @@index([districtId])
  @@index([mandalId])
  @@index([active])
}

model HrcTeam {
  id          String          @id @default(cuid())
  name        String
  description String?
  scopeLevel  TeamScopeLevel
  cellType    HrcCellType?
  countryCode String?
  stateId     String?
  districtId  String?
  mandalId    String?
  state       State?          @relation(fields: [stateId], references: [id])
  district    District?       @relation(fields: [districtId], references: [id])
  mandal      Mandal?         @relation(fields: [mandalId], references: [id])
  members     HrcTeamMember[]
  cases       HrcCase[]
  feeConfigs  PaymentFeeConfig[]
  active      Boolean         @default(true)
  createdBy   String?
  updatedBy   String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([scopeLevel])
  @@index([cellType])
  @@index([stateId])
  @@index([districtId])
  @@index([mandalId])
}

model HrcVolunteerProfile {
  id              String             @id @default(cuid())
  userId          String             @unique
  user            User               @relation(fields: [userId], references: [id])
  bio             String?
  phoneVerified   Boolean            @default(false)
  aadhaarNumber   String?            @unique
  addressLine1    String?
  addressLine2    String?
  pincode         String?
  idCards         HrcIdCard[]
  teamMemberships HrcTeamMember[]
  reportedCases   HrcCase[]          @relation("CaseReporter")
  assignedCases   HrcCase[]          @relation("CaseAssignee")
  caseUpdates     HrcCaseUpdate[]
  caseAttachments HrcCaseAttachment[] @relation("AttachmentUploader")
  active          Boolean            @default(false)
  createdBy       String?
  updatedBy       String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

model HrcTeamMember {
  id          String             @id @default(cuid())
  teamId      String
  volunteerId String
  team        HrcTeam            @relation(fields: [teamId], references: [id])
  volunteer   HrcVolunteerProfile @relation(fields: [volunteerId], references: [id])
  membershipRole HrcTeamMemberRole @default(MEMBER)
  joinedAt    DateTime           @default(now())
  active      Boolean            @default(true)
  createdBy   String?
  updatedBy   String?

  @@unique([teamId, volunteerId])
  @@index([volunteerId])
}

model HrcIdCard {
  id                    String              @id @default(cuid())
  volunteerId           String
  volunteer             HrcVolunteerProfile @relation(fields: [volunteerId], references: [id])
  issueDate             DateTime            @default(now())
  expiryDate            DateTime
  renewalIntervalMonths Int
  feeAmountMinor        Int
  currency              String              @default("INR")
  status                IdCardStatus        @default(PENDING_PAYMENT)
  paymentTxnId          String?
  paymentTxn            PaymentTransaction? @relation(fields: [paymentTxnId], references: [id])
  planId                String?
  plan                  HrcIdCardPlan?      @relation(fields: [planId], references: [id])
  revokedReason         String?
  createdBy             String?
  updatedBy             String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  @@index([volunteerId])
  @@index([status])
  @@index([planId])
}

model HrcCase {
  id               String              @id @default(cuid())
  referenceCode    String              @unique
  title            String
  description      String
  priority         CasePriority        @default(MEDIUM)
  status           CaseStatus          @default(NEW)
  reporterId       String
  reporter         HrcVolunteerProfile @relation("CaseReporter", fields: [reporterId], references: [id])
  teamId           String?
  team             HrcTeam?            @relation(fields: [teamId], references: [id])
  assignedToId     String?
  assignedTo       HrcVolunteerProfile? @relation("CaseAssignee", fields: [assignedToId], references: [id])
  locationStateId  String?
  locationDistrictId String?
  locationMandalId String?
  state            State?              @relation("CaseState", fields: [locationStateId], references: [id])
  district         District?           @relation("CaseDistrict", fields: [locationDistrictId], references: [id])
  mandal           Mandal?             @relation("CaseMandal", fields: [locationMandalId], references: [id])
  attachments      HrcCaseAttachment[]
  updates          HrcCaseUpdate[]
  closedAt         DateTime?
  createdBy        String?
  updatedBy        String?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  @@index([status])
  @@index([teamId])
  @@index([assignedToId])
  @@index([priority])
}

model HrcCaseUpdate {
  id         String              @id @default(cuid())
  caseId     String
  case       HrcCase              @relation(fields: [caseId], references: [id])
  authorId   String?
  author     HrcVolunteerProfile? @relation(fields: [authorId], references: [id])
  statusFrom CaseStatus?
  statusTo   CaseStatus?
  note       String?
  createdBy  String?
  createdAt  DateTime             @default(now())

  @@index([caseId])
}

model HrcCaseAttachment {
  id           String              @id @default(cuid())
  caseId       String
  case         HrcCase              @relation(fields: [caseId], references: [id])
  url          String
  mimeType     String?
  uploadedById String?
  uploadedBy   HrcVolunteerProfile? @relation("AttachmentUploader", fields: [uploadedById], references: [id])
  createdBy    String?
  createdAt    DateTime            @default(now())

  @@index([caseId])
}

model HrcDonation {
  id            String             @id @default(cuid())
  donorUserId   String?
  donorName     String?
  donorEmail    String?
  donorPhone    String?
  amountMinor   Int
  currency      String             @default("INR")
  purpose       String?
  paymentTxnId  String?
  paymentTxn    PaymentTransaction? @relation(fields: [paymentTxnId], references: [id])
  status        PaymentStatus       @default(PENDING)
  refundedMinor Int?
  recurring     Boolean             @default(false) // placeholder for future recurring donations
  createdBy     String?
  updatedBy     String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  @@index([donorUserId])
  @@index([status])
}

model PaymentFeeConfig {
  id                    String           @id @default(cuid())
  purpose               PaymentPurpose
  scopeLevel            TeamScopeLevel?
  teamId                String?
  team                  HrcTeam?         @relation(fields: [teamId], references: [id])
  stateId               String?
  state                 State?           @relation(fields: [stateId], references: [id])
  districtId            String?
  district              District?        @relation(fields: [districtId], references: [id])
  mandalId              String?
  mandal                Mandal?          @relation(fields: [mandalId], references: [id])
  amountMinor           Int
  currency              String           @default("INR")
  renewalIntervalMonths Int?
  active                Boolean          @default(true)
  createdBy             String?
  updatedBy             String?
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt

  @@index([purpose, active])
}

model PaymentTransaction {
  id                String         @id @default(cuid())
  purpose           PaymentPurpose
  amountMinor       Int
  currency          String         @default("INR")
  status            PaymentStatus  @default(CREATED)
  provider          String         @default("RAZORPAY")
  providerOrderId   String?        @unique
  providerPaymentId String?
  providerSignature String?
  refundIds         String[]
  meta              Json?
  failureReason     String?
  paidAt            DateTime?
  refundedAt        DateTime?
  createdBy         String?
  updatedBy         String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  // Relations (optional backrefs)
  idCards           HrcIdCard[]
  donations         HrcDonation[]

  @@index([purpose])
  @@index([status])
}

model RazorpayWebhookEvent {
  id              String    @id @default(cuid())
  eventType       String
  payload         Json
  processed       Boolean   @default(false)
  signature       String?
  relatedOrderId  String?
  relatedPaymentId String?
  receivedAt      DateTime  @default(now())
  processedAt     DateTime?
  createdAt       DateTime  @default(now())

  @@index([processed])
  @@index([relatedOrderId])
  @@index([relatedPaymentId])
}
