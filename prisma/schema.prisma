
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String      @id @default(cuid())
  mobileNumber     String?      @unique
  mpin             String?
  name             String?
  email            String?     @unique
  roleId           String
  languageId       String?
  status           UserStatus  @default(ACTIVE)
  isVerified       Boolean     @default(false)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  role             Role        @relation(fields: [roleId], references: [id])
  language         Language?   @relation(fields: [languageId], references: [id])
  profile          UserProfile?
  articles         Article[]
  articleHistories ArticleHistory[]
  likes            Like[]
  devices          Device[]
  locations        UserLocation[]
}

model UserProfile {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  dob                    DateTime?
  maritalStatus          String?
  emergencyContactNumber String?
  address                Json?
  stateId                String?
  districtId             String?
  assemblyId             String?
  mandalId               String?
  villageId              String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  user                   User      @relation(fields: [userId], references: [id])
  state                  State?    @relation(fields: [stateId], references: [id])
  district               Location? @relation("DistrictProfile", fields: [districtId], references: [id])
  assembly               Location? @relation("AssemblyProfile", fields: [assemblyId], references: [id])
  mandal                 Location? @relation("MandalProfile", fields: [mandalId], references: [id])
  village                Location? @relation("VillageProfile", fields: [villageId], references: [id])
}

model Role {
  id          String   @id @default(cuid())
  name        RoleName @unique
  permissions Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}

model Language {
  id                 String               @id @default(cuid())
  code               String               @unique
  name               String
  isRtl              Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  users              User[]
  states             State[]
  categoryTranslations CategoryTranslation[]
}

model Country {
  id        String   @id @default(cuid())
  code      String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  states    State[]
}

model State {
  id                 String               @id @default(cuid())
  code               String               @unique
  name               String
  countryId          String
  languageId         String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  country            Country              @relation(fields: [countryId], references: [id])
  language           Language             @relation(fields: [languageId], references: [id])
  locations          Location[]
  userProfiles       UserProfile[]
}

model Location {
  id          String       @id @default(cuid())
  name        String
  code        String       @unique
  type        LocationType
  level       Int
  stateId     String
  parentId    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  state       State        @relation(fields: [stateId], references: [id])
  parent      Location?    @relation("LocationHierarchy", fields: [parentId], references: [id])
  children    Location[]   @relation("LocationHierarchy")
  districts   UserProfile[] @relation("DistrictProfile")
  assemblies  UserProfile[] @relation("AssemblyProfile")
  mandals     UserProfile[] @relation("MandalProfile")
  villages    UserProfile[] @relation("VillageProfile")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  iconUrl     String?
  isActive    Boolean   @default(true)
  order       Int
  parentId    String?   
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  translations CategoryTranslation[]
  articles    ArticleCategory[]
}

model CategoryTranslation {
  id         String   @id @default(cuid())
  categoryId String
  languageId String
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  language   Language @relation(fields: [languageId], references: [id])

  @@unique([categoryId, languageId])
}

model Article {
  id              String            @id @default(cuid())
  title           String
  content         String
  authorId        String
  status          ArticleStatus     @default(PENDING)
  scheduledAt     DateTime?
  publishedAt     DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  author          User              @relation(fields: [authorId], references: [id])
  categories      ArticleCategory[]
  history         ArticleHistory[]
  likes           Like[]
  comments        Comment[]
}

model ArticleCategory {
  articleId  String
  categoryId String
  createdAt  DateTime @default(now())
  article    Article  @relation(fields: [articleId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([articleId, categoryId])
}

model ArticleHistory {
  id        String        @id @default(cuid())
  articleId String
  userId    String
  action    HistoryAction
  details   Json?
  createdAt DateTime      @default(now())
  article   Article       @relation(fields: [articleId], references: [id])
  user      User          @relation(fields: [userId], references: [id])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  article   Article  @relation(fields: [articleId], references: [id])

  @@unique([userId, articleId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  articleId String
  parentId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  article   Article  @relation(fields: [articleId], references: [id])
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
}

model OtpLog {
  id           String   @id @default(cuid())
  mobileNumber String
  otp          String
  expiresAt    DateTime
  isVerified   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Device {
  id          String    @id @default(cuid())
  userId      String
  deviceId    String
  deviceModel String
  pushToken   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])

  @@unique([userId, deviceId])
}

model UserLocation {
  id        String   @id @default(cuid())
  userId    String
  latitude  Float
  longitude Float
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

enum RoleName {
  SUPER_ADMIN
  LANGUAGE_ADMIN
  ADMIN
  NEWS_DESK
  REPORTER
  CITIZEN_REPORTER
  GUEST
}

enum LocationType {
  country
  state
  district
  assembly
  mandal
  village
}

enum ArticleStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  PUBLISHED
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum HistoryAction {
  CREATED
  UPDATED
  STATUS_CHANGED
}
