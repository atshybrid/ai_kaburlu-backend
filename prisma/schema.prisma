datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String         @id @default(cuid())
  mobileNumber    String?        @unique
  mpin            String?
  email           String?        @unique
  role            Role           @relation(fields: [roleId], references: [id])
  roleId          String
  language        Language       @relation(fields: [languageId], references: [id])
  languageId      String
  status          String         @default("PENDING") // PENDING, ACTIVE, INACTIVE, SUSPENDED
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  devices         Device[]
  articles        Article[]
  likes           Like[]
  comments        Comment[]
  location        UserLocation? 
}

model Role {
  id          String    @id @default(cuid())
  name        String    @unique
  permissions String[]
  users       User[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Language {
  id        String    @id @default(cuid())
  name      String    @unique
  code      String    @unique
  isDeleted Boolean   @default(false)
  users     User[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Device {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  deviceId    String   @unique
  deviceModel String
  pushToken   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model UserLocation {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  latitude  Float
  longitude Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



model State {
  id        String    @id @default(cuid())
  name      String    @unique
  country   String
  isDeleted Boolean   @default(false)
  districts District[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model District {
  id        String    @id @default(cuid())
  name      String
  state     State     @relation(fields: [stateId], references: [id])
  stateId   String
  isDeleted Boolean   @default(false)
  mandals   Mandal[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Mandal {
  id          String    @id @default(cuid())
  name        String
  district    District  @relation(fields: [districtId], references: [id])
  districtId  String
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Category {
  id          String               @id @default(cuid())
  name        String
  slug        String               @unique
  isDeleted   Boolean              @default(false)
  parent      Category?            @relation("SubCategories", fields: [parentId], references: [id])
  parentId    String?
  children    Category[]           @relation("SubCategories")
  translations CategoryTranslation[]
  articles    Article[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model CategoryTranslation {
  id          String   @id @default(cuid())
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  language    String
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([categoryId, language])
}


model Article {
  id                String       @id @default(cuid())
  title             String
  content           String
  author            User         @relation(fields: [authorId], references: [id])
  authorId          String
  status            String       @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED
  categories        Category[]
  tags              String[]
  images            String[]
  scheduledAt       DateTime?
  isBreakingNews    Boolean      @default(false)
  isTrending        Boolean      @default(false)
  viewCount         Int          @default(0)
  likes             Like[]
  comments          Comment[]
  relatedArticles   Article[]    @relation("RelatedArticles")
  relatedArticlesTo Article[]    @relation("RelatedArticles")
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model Like {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String
  createdAt DateTime @default(now())

  @@unique([userId, articleId])
}

model Comment {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String
  content   String
  parent    Comment? @relation("Replies", fields: [parentId], references: [id])
  parentId  String?
  replies   Comment[] @relation("Replies")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

